{"ast":null,"code":"import{useState}from'react';import{loginFields}from\"../constants/formFields\";import FormAction from\"./FormAction\";import FormExtra from\"./FormExtra\";import Input from\"./Input\";import{SyntheticEvent}from\"react\";import{Navigate}from\"react-router-dom\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const fields=loginFields;let fieldsState={};fields.forEach(field=>fieldsState[field.id]='');export default function Login(){const[loginState,setLoginState]=useState(fieldsState);const[redirect,setRedirect]=useState(false);const handleChange=e=>{setLoginState({...loginState,[e.target.id]:e.target.value});};const handleSubmit=e=>{e.preventDefault();authenticateUser();};//Handle Login API Integration here\n/*const authenticateUser= async (e: SyntheticEvent)=>{\n\n        await fetch('http://localhost:8089/api/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': 'http://localhost:3000',\n                'Access-Control-Allow-Methods':'POST',\n                'Access-Control-Allow-Headers':'Content-type',\n            },\n            body: JSON.stringify({\n                loginState\n            })\n        })\n\n        setRedirect(true)\n    }\n\n    if(redirect) {\n        return (\n            <Navigate to=\"/dashboard\" replace={true} />\n        )\n    }*/const authenticateUser=()=>{const endpoint=\"api/login\";fetch(endpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(loginFields)}).then(response=>response.json()).then(data=>{//API Success from LoginRadius Login API\nconsole.log('success login');}).catch(error=>console.log(error));};return/*#__PURE__*/_jsxs(\"form\",{className:\"mt-8 space-y-6\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"div\",{className:\"-space-y-px\",children:fields.map(field=>/*#__PURE__*/_jsx(Input,{handleChange:handleChange,value:loginState[field.id],labelText:field.labelText,labelFor:field.labelFor,id:field.id,name:field.name,type:field.type,isRequired:field.isRequired,placeholder:field.placeholder},field.id))}),/*#__PURE__*/_jsx(FormExtra,{}),/*#__PURE__*/_jsx(FormAction,{handleSubmit:handleSubmit,text:\"Login\"})]});}","map":{"version":3,"names":["useState","loginFields","FormAction","FormExtra","Input","SyntheticEvent","Navigate","jsx","_jsx","jsxs","_jsxs","fields","fieldsState","forEach","field","id","Login","loginState","setLoginState","redirect","setRedirect","handleChange","e","target","value","handleSubmit","preventDefault","authenticateUser","endpoint","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","error","className","onSubmit","children","map","labelText","labelFor","name","type","isRequired","placeholder","text"],"sources":["/home/nusatrip/WebstormProjects/react-tailwind-app/src/components/Login.js"],"sourcesContent":["import { useState } from 'react';\nimport { loginFields } from \"../constants/formFields\";\nimport FormAction from \"./FormAction\";\nimport FormExtra from \"./FormExtra\";\nimport Input from \"./Input\";\nimport {SyntheticEvent} from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\nconst fields=loginFields;\nlet fieldsState = {};\nfields.forEach(field=>fieldsState[field.id]='');\n\nexport default function Login(){\n    const [loginState,setLoginState]=useState(fieldsState);\n    const [redirect,setRedirect]=useState(false)\n\n    const handleChange=(e)=>{\n        setLoginState({...loginState,[e.target.id]:e.target.value})\n    }\n\n    const handleSubmit=(e)=>{\n        e.preventDefault();\n        authenticateUser();\n    }\n\n    //Handle Login API Integration here\n    /*const authenticateUser= async (e: SyntheticEvent)=>{\n\n        await fetch('http://localhost:8089/api/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': 'http://localhost:3000',\n                'Access-Control-Allow-Methods':'POST',\n                'Access-Control-Allow-Headers':'Content-type',\n            },\n            body: JSON.stringify({\n                loginState\n            })\n        })\n\n        setRedirect(true)\n    }\n\n    if(redirect) {\n        return (\n            <Navigate to=\"/dashboard\" replace={true} />\n        )\n    }*/\n\n    const authenticateUser = () =>{\n        const endpoint=`api/login`;\n        fetch(endpoint,\n            {\n                method:'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body:JSON.stringify(loginFields)\n            }).then(response=>response.json())\n            .then(data=>{\n                //API Success from LoginRadius Login API\n                console.log('success login')\n            })\n            .catch(error=>console.log(error))\n    }\n\n    return(\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n            <div className=\"-space-y-px\">\n                {\n                    fields.map(field=>\n                        <Input\n                            key={field.id}\n                            handleChange={handleChange}\n                            value={loginState[field.id]}\n                            labelText={field.labelText}\n                            labelFor={field.labelFor}\n                            id={field.id}\n                            name={field.name}\n                            type={field.type}\n                            isRequired={field.isRequired}\n                            placeholder={field.placeholder}\n                        />\n\n                    )\n                }\n            </div>\n\n            <FormExtra/>\n            <FormAction handleSubmit={handleSubmit} text=\"Login\"/>\n\n        </form>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}